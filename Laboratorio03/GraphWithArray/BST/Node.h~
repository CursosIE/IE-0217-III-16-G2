

#ifndef NODE_H
#define NODE_H

#include <iostream>
using namespace std;
//BST node

template <typename D>
class Node {
public:
/*
void postOrder(Node<Data>* n){
	 if (n!=nullptr) {
	    postOrder(n->l);
            postOrder(n->r);
            cout << *(n->d) << endl;
            
        }
    }

    void inOrder(Node<Data>* n){
	if (n!=nullptr) {
	    inOrder(n->l);
            cout << *(n->d) << endl;
	    inOrder(n->r);
         } 
	void printTree() {
        this->preOrder(root);
    }

    void preOrder(Node<Data>* n) {
        if (n) {
            cout << *(n->d) << endl;
            preOrder(n->l);
            preOrder(n->r);
        }

    }  
*/
    Node* l;
    Node* r;
    Node* f;
    D* d;

    Node() {
    }

    Node(Node* l, Node* r, D* d, Node* f) {
        this->l = l;
        this->d = d;
        this->r = r;
        this->f = f;
    }

    Node(const Node& orig) { // hacerlo
    }

    virtual ~Node() {
        cout << "deleting node " << this << endl;
        if (*(this->f->d) > *(this->d)) {
            this->f->l = nullptr;
        } else {
            this->f->r = nullptr;
        }


        delete d;

    }

};

#endif /* NODE_H */

